import concurrent
import concurrent.futures
import multiprocessing
import os.path
import shutil
import time

import cv2
from PIL import Image
from azure.cognitiveservices.vision.computervision import ComputerVisionClient
from azure.cognitiveservices.vision.face import FaceClient
from moviepy.editor import *
from msrest.authentication import CognitiveServicesCredentials
from azure.ai.textanalytics import TextAnalyticsClient
from azure.core.credentials import AzureKeyCredential
import matplotlib.pyplot as plt
import numpy as np

slices = 0
KEY = "e05f24b6835c43a1bdc47bc056f808ce"
ENDPOINT = "https://cognitiveps.cognitiveservices.azure.com/"


emotions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

forbidden_content = [0, 0, 0]

'''def sort_files_threads():
    # Se determina si la cantidad de archivos es menor que la cantidad de nucleos disponibles
    # En caso de que sea menor es mejor ejecutarlo de forma secuencial
    if len(os.listdir("files")) <= cpu_quantity * 2:
        get_files_on_dir(os.listdir("files"))
    else:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            for sl in get_packages("files"):
                executor.submit(get_files_on_dir, sl)'''


def images_detection_processing(imagePath):
    '''for face in detected:
        print(f"->     Azure id: {face.face_id}")
        print(f"->     Detected age: {face.face_attributes.age}")
        print(f"->     Detected gender: {face.face_attributes.gender}")
        print(f"->     Detected emotion: {face.face_attributes.emotion}")
        print(f"->     Anger: {face.face_attributes.emotion.anger}")
        emotions[0] = emotions[0] + face.face_attributes.emotion.anger
        emotions[1] = emotions[1] + face.face_attributes.emotion.contempt
        emotions[2] = emotions[2] + face.face_attributes.emotion.disgust
        emotions[3] = emotions[3] + face.face_attributes.emotion.fear
        emotions[4] = emotions[4] + face.face_attributes.emotion.happiness
        emotions[5] = emotions[5] + face.face_attributes.emotion.neutral
        emotions[6] = emotions[6] + face.face_attributes.emotion.sadness
        emotions[7] = emotions[7] + face.face_attributes.emotion.surprise
    print("---------------------------------------------")'''


def detect_forbidden_scenes(image_object):

    computer_vision_client = ComputerVisionClient(
        ENDPOINT, CognitiveServicesCredentials(KEY))
    local_image_features = ["adult", "description"]
    detect_adult_results_local = computer_vision_client.analyze_image_in_stream(
        image_object, local_image_features)
    print("---------------------------------------------")
    print(f"|For image name: {image_url}|")
    print("---------------------------------------------")
    print("Is adult content: {} with confidence {:.2f}".format(detect_adult_results_local.adult.is_adult_content,
                                                               detect_adult_results_local.adult.adult_score * 100))
    print("Has racy content: {} with confidence {:.2f}".format(detect_adult_results_local.adult.is_racy_content,
                                                               detect_adult_results_local.adult.racy_score * 100))

    for caption in detect_adult_results_local.description.captions:
        print(caption.text)
    if detect_adult_results_local.adult.is_adult_content:
        forbidden_content[0] = forbidden_content[0] + 1
    elif detect_adult_results_local.adult.is_racy_content:
        forbidden_content[1] = forbidden_content[1] + 1
    else:
        forbidden_content[2] = forbidden_content[2] + 1
    print("---------------------------------------------")


'''def images_detection_processing_threads():
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for img_name in get_packages("img"):
            executor.submit(detect_forbidden_scenes, img_name)

    with concurrent.futures.ThreadPoolExecutor() as executor:
        for img_name in get_packages("img"):
            executor.submit(images_detection_processing, img_name)'''


def authenticate_client():
    ta_credential = AzureKeyCredential(KEY)
    text_analytics_client = TextAnalyticsClient(
        endpoint=ENDPOINT,
        credential=ta_credential)
    return text_analytics_client


client = authenticate_client()

# Example function for detecting sentiment in text


def sentiment_analysis_example(client1, text, name):
    documents = [text]
    response = client1.analyze_sentiment(documents=documents)[0]
    print("Overall scores: positive={0:.2f}; neutral={1:.2f}; negative={2:.2f} \n".format(
        response.confidence_scores.positive,
        response.confidence_scores.neutral,
        response.confidence_scores.negative,
    ))


def create_graph_emotions():
    emotions_dict = {
        'anger': emotions[0],
        'contempt': emotions[1],
        'disgust': emotions[2],
        'fear': emotions[3],
        'happiness': emotions[4],
        'neutral': emotions[5],
        'sadness': emotions[6],
        'surprise': emotions[7]}

    names = list(emotions_dict.keys())
    values = list(emotions_dict.values())

    plt.barh(names, values)
    plt.title('Emotions frecuency')
    plt.ylabel('Emotion type')
    plt.xlabel('Quantity of emotion')
    plt.show()


def create_graph_censored_content():
    plt.barh(['Adult content', 'Racy content',
             'All public'], forbidden_content)
    plt.title('Censored content')
    plt.ylabel('Content type')
    plt.xlabel('Censored content frequency')
    plt.show()

